<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
<TITLE> New Document </TITLE>
<META NAME="Generator" CONTENT="EditPlus">
<META NAME="Author" CONTENT="">
<META NAME="Keywords" CONTENT="">
<META NAME="Description" CONTENT="">
</HEAD>

<BODY>
<div class="help_breadcrumbs"><a href="../main.html">사용자 메뉴얼</a> > 
<a href="./modeler_main.html">영역 모델러의 사용</a> > 
<a href="./modeler_1.html">UML Structural(구조적 모델링 다이어그램)</a> > 
<a href="./modeler_1_6.html">Deployment</a> > 
</div>

<h1 class="NavTitle">관계 연결 및 편집 </h1>

<p>Deployment 다이어그램은 Deployment의 palett에서 객체를 이용하여 작성한다.
<ol>
<li>Associate</li>
<p>한 클래스의 기능 수행 가능 여부가 다른 클래스에 전적으로 의존하고 있는지를 표현한다.
<P CLASS="Para" align="center"><img src="../images/modeler/1/deployment/image021.jpg" alt="start1" border="0"><br>
그림 2.1-2 연관 관계 종류
</p>
<li>Communication</li>
<p>추가 작업 필요
<P CLASS="Para" align="center"><img src="../images/modeler/1/deployment/image022.jpg" alt="start1" border="0"><br>
그림 2.1-2 의존 관계
</p>
<li>Generalization</li>
<p>A generalization is used to indicate inheritance. Drawn from the specific classifier to a general classifier, the generalize implication is that the source inherits the target's characteristics.
<P CLASS="Para" align="center"><img src="../images/modeler/1/deployment/image023.jpg" alt="start1" border="0"><br>
그림 2.1-2 상속 관계
</p>
<li>Realize</li>
<p>The source object implements or realizes the destination. Realize is used to express traceability and completeness in the model - a business process or requirement is realized by one or more use cases which are in turn realized by some classes, which in turn are realized by a component, etc. Mapping requirements, classes, etc. across the design of your system, up through the levels of modeling abstraction, ensures the big picture of your system remembers and reflects all the little pictures and details that constrain and define it.
<P CLASS="Para" align="center"><img src="../images/modeler/1/deployment/image024.jpg" alt="start1" border="0"><br>
그림 2.1-2 상속 관계
</p>
<li>Dependency</li>
<p>Dependency relationships are used to model a wide range of dependent relationships between model elements - and even between models themselves.  The Dependencies package as defined in UML 2.0 has many derivatives, such as Realization, Instantiation and Usage. Once you create a dependency you can further refine its meaning by applying a specialized stereotype.
<P CLASS="Para" align="center"><img src="../images/modeler/1/deployment/image025.jpg" alt="start1" border="0"><br>
그림 2.1-2 상속 관계
</p>
<li>Manifestion</li>
<p>A manifest relationship indicates that the artifact source embodies the target model element. Stereotypes can be added to Enterprise Architect to classify the type of manifestation of the model element. 
<P CLASS="Para" align="center"><img src="../images/modeler/1/deployment/image026.jpg" alt="start1" border="0"><br>
그림 2.1-2 상속 관계
</p>
<li>Deployment</li>
<p>A deployment is a type of dependency relationship that indicates the deployment of an artifact onto a node or executable target. A deployment can be made at type and instance levels. At the type level, a deployment would be made for every instance of the node. Deployment can also be specified for an instance of a node, so that a node's instances can have varied deployed artifacts. With composite structures modeled with nodes defined as parts, parts can also serve as targets of a deployment relationship.
<P CLASS="Para" align="center"><img src="../images/modeler/1/deployment/image027.jpg" alt="start1" border="0"><br>
그림 2.1-2 상속 관계
</p>
<li>관계 편집</li>
<p>관계에 마우스를 갖다 대고 우클릭을 하면 다음과 같은 팝업창이 뜬다.
<P CLASS="Para" align="center"><img src="../images/modeler/1/deployment/image028.jpg" alt="start1" border="0"><br>
그림 2.1-2 관계 팝업창
</p>
<ul>
<li>Aggregate - 집합 연관관계를 표현한다.</li>
<li>Composite - 복합 연관관계를 표현한다.</li>
<li>Vavigable - 방향성 관계를 표현한다.</li>
<li>Role Name - 관계에 Role Name을 설정한다.</li>
<li>Direct Line - 관계를 직선으로 만든다.</li>
<li>Delete - 관계를 삭제한다.</li>
</ul>
<p>관계의 프로퍼티창은 이름, 프로퍼티, 스테레오타입으로 나뉘는데 프로퍼티에서는 세부 내용을 설정할 수 있다.
SourceRole과 TargetRole는 대상이 다르고 같은 내용이며 Description은 관계에 대한 내용을 변경할 수 있다.
<P CLASS="Para" align="center"><img src="../images/modeler/1/deployment/image029.jpg" alt="start1" border="0"><br>
그림 2.1-2 관계 프로퍼티
</p>
<ul>
<li>Role - role 이름을 변경한다.</li>
<li>RoleNote - role에 설명내용을 변경한다.</li>
<li>Constraint(s) - 추가 작업 필요</li>
<li>Qualifier(s) - 추가 작업 필요</li>
<li>Derived - 추가 작업 필요 </li>
<li>Derived Union - union을 설정한다.</li>
<li>Owned - 추가 작업 필요</li>
<li>Ordered - 추가 작업 필요</li>
<li>Allow Duplicates - 추가 작업 필요</li>
<li>Multiplicity - 추가 작업 필요</li>
<li>Aggregation - 관계 타입을 설정한다.</li>
<li>Navigability - 관계 방향성을 설정한다.</li>
</ul>
</ol>
</BODY>
</HTML>
