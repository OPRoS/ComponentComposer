<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
<TITLE> New Document </TITLE>
<META NAME="Generator" CONTENT="EditPlus">
<META NAME="Author" CONTENT="">
<META NAME="Keywords" CONTENT="">
<META NAME="Description" CONTENT="">
</HEAD>

<BODY>
<div class="help_breadcrumbs"><a href="../main.html">사용자 메뉴얼</a> > 
<a href="../construction/construction_main.html">N3Com 구성</a> >
<a href="../construction/construction_1.html">주요 특성</a> >
</div>

<H1 CLASS="Head">
시스템의 기능</H1>
<h3 class="NavListTitle">통합 GUI</h3>
<P>통합 GUI는 컴포넌트 생성 지원 도구의 통합 사용자 인터페이스를 제공하는 블록으로 사용자의 요구에 의한 각종 이벤트를 처리하여 각 단위 편집기에 전달하고, 그 결과를 사용자가 볼 수 있게 화면에 나타낸다. 통합 GUI의 주요 기능을 요약하면 다음과 같다.
<p>
<ul>
<li>그래픽 기반의 사용자 인터페이스: 모델링을 하는 사용자에게 모델에 대한 직관적인 뷰를 제공하고 쉽게 사용할 수 있도록 윈도우 기반의 각종 화면과 도구들을 제공한다. GUI 화면은 메인 메뉴 바(Main Menu Bar)와 풀다운 메뉴(Pull-down Menu), 툴 바(Tool Bar), 팔레트 바(Palette Bar), 캔버스 윈도우(Canvas Window), 브라우징 윈도우(Browsing Window), 속성 편집기(Property Editor), 메시지 윈도우(Message Window), 오른쪽 마우스 클릭으로 활성화되는 팝업 메뉴(Pop-up Menu)로 구성된다. 브라우징 윈도우는 다이어그램 내의 모든 구성요소를 트리 형태로 보여주어 사용자가 원하는 구성 요소를 쉽게 찾을 수 있고, 모델의 구조 변경을 할 수 있게 한다. 속성 편집기는 다이어그램의 구성 요소가 선택되면 그것의 속성을 모두 보여주는 부분이고, 메시지 윈도우는 사용자가 컴파일이나 객체 검색 등을 수행할 때 그 결과를 표시하는 부분이다. </li>
<li>영역 및 컴포넌트 모델러의 공통 기능: 통합 GUI 블록에는 모델링 편집기에 속하지 않으면서 공동으로 사용하는 공통된 기능을 제공한다. 예를 들면, 모델 파일의 입출력 기능, 인쇄 기능, 윈도우 관리 기능, 보기 기능, 정렬 기능 등이 있다.
</li>
</ul>
<h3 class="NavListTitle">영역 모델러</h3>
<p>영역 모델러는 대상 어플리케이션이 속하는 어플리케이션의 공통 요소들을 모델링 하기 위해 어플리케이션의 기능적인 단위인 유즈케이스들을 기술하는 쓰임새도와과 어플리케이션에 존재하는 클래스들을 정의하는 클래스도를 기술하는 기능이 있으며, 이러한 정보를 바탕으로 후보 컴포넌트들을 식별하는 기능을 제공한다. 영역 모델러를 구성하는 블록의 기능은 아래와 같다.
<ul>
<li>프로젝트 관리 : 전체 프로젝트에 관련된 환경 정보 및 저장소를 관리하며, 각 단계별 산출물을 트리 형식으로 모델 브라우징 윈도우 내에서 관리하는 기능을 제공한다.</li>
<li>유즈케이스 작성 : 개발 대상 시스템이 포함되는 영역의 유즈케이스들을 쓰임새도으로 시각적으로 모델링 하는 기능을 제공한다.</li>
<li>영역 객체 모델 편집: 개발 대상 시스템의 클래스들을 모델링하고 클래스들의 관계를 기술하는 기능을 제공한다.</li>
<li>순차도 작성 : 객체들 간의 시간에 따른 메시지 흐름을 기술하기 위한 순차도 편집 기능을 제공한다.</li>
<li>영역 컴포넌트 식별: 컴포넌트의 재사용성을 높이기 위해 문제 영역에 존재하는 공통 요소를 중심으로 가변성을 고려하여 컴포넌트를 식별하는 기능을 제공한다. 영역 컴포넌트 식별은 유즈케이스 모델의 각 유즈케이스 에 대응되는 클래스도 내의 객체간의 연관성 측정치를 이용하여 이루어진다.</li>
</ul>
<h3 class="NavListTitle">컴포넌트 모델러</h3>
<p>컴포넌트 모델러는 영역 분석 정보를 바탕으로 컴포넌트를 정의하고 각 컴포넌트의 인터페이스를 명확히 기술하며, 컴포넌트 구현을 위한 내부 클래스들의 설계를 지원하는 도구이다. 컴포넌트도, 컴포넌트 내부 클래스도, 순차도, 설계 패턴, OCL, XML 변환 기능이 제공되며, 다양한 다이어그램을 효율적으로 사용하거나 다이어그램들 간의 산출물 공유를 원활히 할 수 있는 통합 환경을 제공한다.
<ul>
<li>컴포넌트도 편집기는 기본적인 다이어그램 편집 기능과 함께, 인터페이스를 명세할 수 있는 기능을 제공한다. 인터페이스 명세는 오퍼레이션의 집합으로 구성되며 오퍼레이션을 기술하기 위해 입.출력 인자와 오퍼레이션의 사전/사후 조건을 기술한다.</li>
<li>컴포넌트 내부 클래스도 편집기는 컴포넌트 내부의 클래스 구조를 명확히 기술하고 EJB 명세에 따라 세션 빈과 엔티티 빈을 표현하며 그 외 컴포넌트의 세부적인 정보를 기술한다. </li>
<li>순차도 작성기는 컴포넌트의 동적인 행위를 표현하기 위한 다이어그램으로서 컴포넌트 사이의 동적인 행위뿐만 아니라 컴포넌트와 클래스 사이, 클래스와 클래스 등 다양한 단위의 동적인 행위를 표현한다.</li>
<li>설계 패턴 적용기는 컴포넌트 내부 클래스도와 밀접하게 연계하여 컴포넌트 내부 설계 시에 일반적인 설계 패턴(Design Pattern)과 EJB 관련 설계 패턴들을 지원하는 기능을 제공한다.</li>
<li>OCL 지원기는 UML 기법의 OCL을 통해 컴포넌트와 클래스를 보다 정형적으로 명세하도록 한다. OCL은 클래스도에서 클래스의 불변성을 나타내거나 메소드의 사전/사후 조건을 기술하고, 컴포넌트도에서 컴포넌트 인터페이스 내부의 오퍼레이션의 사전/사후 조건을 기술하기 위해 사용된다.</li>
<li>XML 변환기는 타 모델링 도구와의 UML 모델링 정보 교환을 위한 것으로 타 도구에서 생성된 XML 기반 UML 모델을 N3COM 도구로 가져올 수 있는 기능과 생성 지원 도구에서 생성한 UML 모델을 XML로 변환하여 타 모델링 도구로 가져갈 수 있는 기능을 제공한다. </li>
</ul>
<h3 class="NavListTitle">코드 생성기</h3>
<p>코드 생성기는 컴포넌트도의 각 컴포넌트 별로 내부 비즈니스 로직을 구현하고 컴포넌트들을 패키징하여 전개, 시험할 수 있는 환경을 제공한다. 그리고 상세 설계와 소스 코드의 일관성을 유지하기 위해 SRE 기능을 제공한다. 코드 생성기의 주요 기능은 다음과 같다.
<ul>
<li>SRE : 자바 소스 코드와 컴포넌트 내부 클래스도의 일관성을 동적으로 유지시키는 기능으로 소스 코드가 변경될 경우 자동으로 컴포넌트 내부 클래스도에 변경사항을 반영하고 컴포넌트 내부 클래스도가 변경되면 자동으로 소스 코드를 변경한다.</li>
<li>자바 소스 편집 : 개발자가 자바 언어를 이용하여 비즈니스 로직을 쉽게 구현할 수 있도록 자바 언어 중심의 프로그래밍 환경을 제공한다. </li>
<li>EJB 골격 코드 생성 : 세션 빈과 엔티티 빈과 같은 EJB 빈들은 기본 메소드들로 구성된 기본 골격을 가지고 있다. 개발자가 이러한 부분들을 쉽게 구현할 수 있도록 EJB 빈들의 골격을 자동으로 생성, 관리하는 기능을 제공한다.</li>
<li>컴포넌트의 전개 : 컴포넌트들을 실행시키기 위해서는 우선 컴포넌트들을 전개 단위로 묶어서 어플리케이션 서버(Application Server)에 전개하여야 한다. 컴포넌트 전개기는 컴포넌트들을 전개 단위로 묶고 전개 파일(Deployment Descriptor; DD)를 생성하고 실제 어플리케이션 서버에 전개하는 기능을 제공한다.</li>
<li>컴포넌트 인터페이스 시험 : EJB 컴포넌트의 인터페이스를 간단히 시험할 수 있는 웹 기반 클라이언트 프로그램을 자동 생성하는 기능이다. 클라이언트 프로그램은 EJB의 홈 인터페이스와 원격 인터페이스의 메소드를 호출하고 결과 값을 볼 수 있는 환경을 제공한다.</li>
</ul>
<h3 class="NavListTitle">응용 컴포넌트 추출기</h3>
<p>응용 컴포넌트 추출기는 기존의 자바 언어로 된 프로그램으로부터 컴포넌트를 식별하여 컴포넌트도를 생성하고 EJB로 변환한다. 컴포넌트 식별을 위해 자바 코드 분석기를 이용하여 소스 코드를 분석하여 클래스도를 생성하고, 생성된 클래스도와 기타 분석 정보들을 바탕으로 하여 컴포넌트 후보를 제시한다. 사용자는 컴포넌트 후보 중에서 적절한 컴포넌트를 선택하여 EJB 컴포넌트로 변환한다. 변환된 컴포넌트는 컴포넌트 모델러에 전달되어 컴포넌트 모델러에서 생성된 다른 컴포넌트와 동일하게 사용된다. 또한 자바 코드 분석기를 통해 분석된 소스 코드의 정보는 메트릭 정보를 생성할 때 사용되어 총 47개의 메트릭 정보를 사용자에게 제공한다.
<h3 class="NavListTitle">데이터베이스 연계기</h3>
<p>데이터베이스 연계기는 데이터베이스의 테이블을 생성, 관리할 수 있는 환경을 제공한다. 사용자는 데이터베이스 연계기를 통해 쉽게 DB 테이블을 생성할 수 있고 컴포넌트 설계 시에는 DB 테이블로부터 손쉽게 엔티티 빈을 생성할 수 있는 기능을 제공한다. 다음은 데이터베이스 연계기의 주요 기능을 나타낸다.
<ul>
<li>DB 테이블 가져오기 : 상용 DBMS를 연결하여 내부의 DB 스키마 정보를 가져와서 스키마 모델을 생성하고 이 모델을 사용자에게 보여줄 수 있는 기능을 제공한다.</li>
<li>DB 테이블의 생성 : 사용자가 정의한 DB 테이블 정보를 바탕으로 데이터베이스에 DB 테이블을 생성하는 기능을 제공한다.</li>
<li>DB 테이블을 엔티티 빈으로 변환 : DB 테이블 정보를 컴포넌트 내부 클래스도에서 사용할 수 있도록 EJB 엔티티 빈으로 변환하는 기능을 제공한다.</li>
<li>질의어 생성 : 사용자가 손쉽게 SQL(Structured Query Language) 문장을 생성할 수 있도록 GUI 기반의 SQL 생성 기능을 제공한다.</li>
</ul>
&nbsp;<br>
</BODY>
</HTML>
